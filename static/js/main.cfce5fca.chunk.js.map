{"version":3,"sources":["components/Number.jsx","components/Popup.jsx","components/Game.jsx","components/Home.jsx","components/About.jsx","components/App.jsx","serviceWorker.js","index.jsx"],"names":["NumberButton","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleSelect","setState","isSelected","checkRightAnswer","state","answer","correctAnswer","isCorrect","onRightAnswer","_this2","_this$props","react_default","a","createElement","className","concat","onClick","Component","Popup","react_router_dom","to","React","Game","calculateResult","result","randomNumber1","Math","floor","random","randomNumber2","randomNumber3","randomNumber4","randomNumber5","opindex","question","wrongAnswers","shuffledAnswers","shuffle","handleRightAnswerRecieved","isAnsweredCorrectly","setTimeout","document","getElementById","click","gameStatus","showPopup","_this$state","components_Popup","map","shuffledAnswer","components_Number","key","uuid","v4","Timer","initialTime","direction","checkpoints","time","callback","timeIsUp","_ref","reset","Fragment","Seconds","id","Home","About","src","alt","href","rel","target","App","react_router","exact","path","component","Boolean","window","location","hostname","match","root","ReactDOM","render","basename","process","ROUTER_BASE_URL","components_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cfce5fca.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass NumberButton extends Component { \n    constructor(props){\n        super(props);\n        this.state = {\n            isSelected: false\n        }\n    }\n\n    checkRightAnswer(){\n        if (this.props.answer === this.props.correctAnswer){\n            this.setState({\n                isCorrect: true\n            });\n            this.props.onRightAnswer();\n        }\n    }\n    handleSelect = () => {\n        this.setState({\n            isSelected: true\n        })\n        this.checkRightAnswer();\n    }\n\n    \n    render(){\n        const { answer, isCorrect} = this.props;\n        // const classColor = `number ${this.props.isCorrect ? 'green' : ''} ${this.props.isAnsweredCorrectly && !this.props.isCorrect ? 'wrong' : ''} `\n        const getClassColor = () => {\n            if(this.state.isCorrect){\n                return ' green';\n            } else if(this.state.isSelected && !isCorrect){\n                return ' wrong';\n            } \n        }\n        return (\n            <div>\n                <div \n                className={` number ${getClassColor()}`}\n                onClick={this.handleSelect} >{answer}\n                </div>\n            </div>\n\n        );\n    }\n}\n\nexport default NumberButton;","import React from 'react';  \nimport { Link } from 'react-router-dom';\n\nclass Popup extends React.Component {  \n  render() {  \nreturn (  \n<div className='popup'>  \n<div className='popup_inner'>  \n<h3>Times up!</h3>  \n<Link to=\"/\">\n<button className=\"homeButtons\"> Go home</button>  \n</Link>\n</div>  \n</div>  \n);  \n}  \n}  \n\nexport default Popup;","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport NumberButton from './Number';\nimport { shuffle } from 'lodash';\nimport Timer from 'react-compound-timer';\nimport Popup from './Popup';\nimport uuid from \"uuid\";\n\nclass Game extends Component {\n    constructor(props){\n      super(props);\n      this.state = {\n        question: '',\n        correctAnswer: 0,\n        wrongAnswers: [],\n        shuffledAnswers: [],\n        gameStatus: 'new',\n        isSelected: false,\n        isCorrect: false,\n        isAnsweredCorrectly: false,\n        showPopup: false\n      }\n    }\n    \n    calculateResult = () => {\n      // // console.log(this.randomDataSet(10, 0, 100));\n      // const randomUniques = this.randomDataSet(10, 0, 100);\n      // const randomUnique = this.randomUniques.map(randomUnique =>\n      //   Math.floor(randomUniques()))\n      //   console.log(randomUnique);\n      const randomNumber1 = Math.floor(Math.random() * 30);\n      const randomNumber2 = Math.floor(Math.random() * 20);\n      const randomNumber3 = Math.floor(Math.random() * 30);\n      const randomNumber4 = Math.floor(Math.random() * 40);\n      const randomNumber5 = Math.floor(Math.random() * 20);\n      const operators = ['+','-','/','x'];\n      const opindex = Math.floor(Math.random()*4);\n      let result;\n      switch(opindex){\n          case 0: result = randomNumber1 + randomNumber2; break;\n          case 1: result = randomNumber1 - randomNumber2; break;\n          case 2: result = randomNumber1 / randomNumber2; break;\n          case 3: result = randomNumber1 * randomNumber2; break;\n          default:\n      };\n    //   const shuffledAnswers = [this.correctAnswer]\n    //   while(shuffledAnswers.length < 4){\n    //     var r = Math.floor(Math.random()*100) + 1;\n    //     if(shuffledAnswers.indexOf(r) === -1) shuffledAnswers.push(r);\n    // }\n      this.setState({\n        question: `${randomNumber1} ${operators[opindex]} ${randomNumber2} = `,\n        correctAnswer: Math.floor(result),\n        wrongAnswers: [randomNumber3, randomNumber4, randomNumber5],\n        shuffledAnswers: shuffle([randomNumber3, randomNumber4, randomNumber5, Math.floor(result)])\n      })\n    }\n      \n      componentDidMount(){\n        this.calculateResult();\n      }\n\n      // call set state and set timer\n      handleRightAnswerRecieved = () => {\n        this.setState(\n          () => {\n            return {isAnsweredCorrectly: true }\n          },\n          () => {\n            setTimeout(() => {\n              this.calculateResult();\n              document.getElementById('resetbtn').click();\n            }, 1000)\n          }\n          );\n        // this.calculateResult();\n      }\n\n      // randomDataSet(dataSetSize, minValue, maxValue) {\n      //   return new Array(dataSetSize).fill(0).map(function() {\n      //     return Math.random() * (maxValue - minValue) + minValue;\n      //   });\n      // }\n\n      timeIsUp(){\n        this.setState({\n          showPopup: !this.state.showPopup\n        })\n        // window.location.replace(\"/\")\n      }\n      \n      render(){\n        const { \n          question,\n          shuffledAnswers,\n          isSelected,\n          correctAnswer,\n          isCorrect,\n          isAnsweredCorrectly\n        } = this.state;\n        \n        return (\n          <div className=\"game gamecontainer\">\n        {this.state.showPopup ?  \n          <Popup  />  \n          : null  \n          } \n        <div className=\"intro\">\n         <h3> Do your best to answer the question as quick as possible, if your answer is wrong it will appear red</h3>\n        </div>\n        <div className=\"target\">{question}</div>\n        <div className=\"challenge-numbers\">\n          {shuffledAnswers.map(shuffledAnswer => <NumberButton \n            key={uuid.v4()} \n            isCorrect={isCorrect} \n            answer={shuffledAnswer} \n            isSelected={isSelected} \n            isAnsweredCorrectly={isAnsweredCorrectly}\n            correctAnswer={correctAnswer}\n            onRightAnswer={this.handleRightAnswerRecieved} />\n          )}\n\n        </div>\n        <div className=\"footer\">\n          <div className=\"timer-value\">\n          <Timer\n            initialTime={10000}\n            direction=\"backward\"\n            checkpoints={[\n              {\n                  time: 0,\n                  callback: () => this.timeIsUp(),\n              }\n          ]}\n        >\n          {({ reset }) => (\n              <React.Fragment>\n                  <Timer.Seconds /> \n                  <button className=\"resetbtn\" id=\"resetbtn\" onClick={reset}>Reset</button>\n              </React.Fragment>\n          )}\n        </Timer>\n          </div>\n          <div>\n            <Link to='/'>\n                <button className=\"homeButtons\">Home</button>\n            </Link>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Game;","import React, { Component } from 'react';\nimport { Link } from \"react-router-dom\";\n\nclass Home extends Component {\n  render(){\n    return (\n      <div className=\"bodycontainer\">\n      <h1>Math is Cool!</h1>\n      <div className=\"bothButtons\">\n      <Link to='/Game'>\n      <button className=\"homeButtons\">START</button>\n      </Link>\n      <Link to=\"/About\">\n      <button className=\"homeButtons\" >ABOUT</button>\n      </Link>\n      </div>\n      <h3>You will have 10 seconds to answer each question, good luck ;)</h3>\n      </div>\n    );\n  }\n}\n\nexport default Home;","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst About = () => {\n    return (\n        <div className=\"aboutcontainer\">\n            <h1>About the Creator</h1>\n            <img className=\"profileImage\" src=\"https://res.cloudinary.com/dl2ribpco/image/upload/v1557245379/ChaseTheSpace/linkedin_ekkfus.jpg\" alt=\"\" />\n            <div className=\"textbox\">\n            <h4>24H HACKATHON - Wild Code School</h4>\n            The creator of this app was immensely sleep deprived during its creation, and under a RIDICULOUS time constraint, so please be kind when evaluating the essence of this game. She hopes you can brush up on your math skills, and have fun! - Isabella Fry\n                <div className=\"\">\n                    <a href=\"https://www.linkedin.com/in/isabella-fry-5a1618182/\" rel=\"noopener noreferrer\" target=\"_blank\" ><img className=\"iconspecs\" src=\"https://cdn3.iconfinder.com/data/icons/sociocons/256/linkedin-sociocon.png\" alt=\"\"/></a>\n                    <a href=\"https://github.com/dragonslayer77\" rel=\"noopener noreferrer\" target=\"_blank\"><img className=\"iconspecs\" src=\"https://image.flaticon.com/icons/png/128/25/25231.png\" alt=\"\" /></a>\n                </div>\n            </div>\n            <div>\n            <Link to='/'>\n                <button className=\"homeButtons aboutButtons\">Home</button>\n            </Link>\n          </div>\n        </div>\n    );\n};\nexport default About;\n","import React, { Component } from 'react';\nimport { Switch, Route } from \"react-router-dom\";\nimport Game from './Game';\nimport Home from './Home';\nimport About from './About';\n\nclass App extends Component {\n  render(){\n    return (\n      <div className=\"\">\n        <Switch>\n                <Route exact path=\"/\" component={Home} />\n                <Route path=\"/Game\" component={Game} />\n                <Route path=\"/About\" component={About}/>\n        </Switch>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport './application.scss';\n\nconst root = document.getElementById('root');\nif (root) {\n    ReactDOM.render(\n        <HashRouter basename={process.env.ROUTER_BASE_URL}>\n            <App />\n        </HashRouter>, root\n    );\n}\nserviceWorker.unregister();\n"],"sourceRoot":""}